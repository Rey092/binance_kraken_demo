[tool.poetry]
name = "binance-kraken-demo"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
django = "^5.1.2"
websockets = "^13.1"
asyncio = "^3.4.3"
django-ninja = "^1.3.0"
httpx = "^0.27.2"
gunicorn = "^23.0.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--import-mode=importlib"
python_files = [
    "tests.py",
    "test_*.py",
]
pythonpath = "."

# ==== mypy ====
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*.py",
    "staticfiles/*"
]
fix = true
line-length = 88
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "UP",
    "YTT",
    # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
    "ASYNC",
    "D",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "DJ",
    "EM",
    "EXE",
    "FA",
    'ISC',
    "ICN",
    "G",
    'INP',
    'PIE',
    "T20",
    'PYI',
    'PT',
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "TCH",
    "INT",
    # "ARG", # Unused function argument
    "PTH",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "TRY",
    "FLY",
    # "NPY",
    # "AIR",
    "PERF",
    # "FURB",
    # "LOG",
    "RUF"
]
ignore = [
    "RUF012", # ruff - mutable class attributes should be annotated with `typing.ClassVar`
    "PLR0913", # too many arguments
    "N805", # pydantic has decorators with cls argument
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# The fixes in extend-unsafe-fixes will require
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = [
    "UP038"
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "sqlalchemy.ext.declarative.declared_attr",
    "sqlalchemy.orm.declared_attr.directive",
    "sqlalchemy.orm.declared_attr",
]

[tool.ruff.lint.per-file-ignores]
"*/migrations/*.py" = ['D104', 'D103', 'D205', 'D212']
"__init__.py" = ['F401', 'D104']
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TCH", "ERA", "D", "RET", "E731", "RUF012", "FA100", "ARG001"]
"docs/conf.py" = ["FIX002", "ARG001", "INP001"]
"scripts/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT", "INP001"]
"scripts/*.py" = ["INP001", "ERA001"]
"src/app/db/migrations/versions/*.py" = ["ANN201", "INP001"]
"tests/*.py" = ['D103', 'S101', 'D104']
"settings.py" = ["N802", "EM101", "TRY003"]

[tool.slotscheck]
strict-imports = false

[tool.codespell]
ignore-words-list = "alog"
skip = 'pdm.lock, package-lock.json'

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ['tests', 'src']

[tool.pyright]
exclude = ["scripts", "docs"]
include = ["src/app", "tests"]
